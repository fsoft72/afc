14 Jan 2011:	FIX:	CGIManager					Status: STABLE

			Fix parsing of GET params with escaped chars.


06 Apr 2007:	FIX:	RegExp						Status: STABLE

			afc_regexp_replace() no longer returns an empty string if the
			giver regex pattern is not found on the source string.

		ADD:	ArrayMaster / NodeMaster / StringNode		Status: STABLE

			Added: afc_*_add_tail(), afc_*_add_head() and afc_*_insert()
			to add items at the end, head and current position respectively.

		ENH:	64bit compatibility 				Status: STABLE

			AFC should work without problems on 64bit machines.


02 Jun 2005:	ENH:	HashMaster					Status: STABLE

			afc_hash_master_del() now returns the next node data and not
			an HashMaster Data structure.

		UPD:	Dictionary					Status: STABLE

			afc_dictionary_del() has been updated to reflect HashMaster
			changes.

31 May 2005:	ENH:	64bit compatibility

15 May 2004:	ADD:	AVLTree						Status: ALPHA

			Added a new class AVLTree that handles balanced Trees.

05 May 2004:    FIX:    BTree						Status: BETA

			The remove routine crashed if a NULL root was passed

			The afc_btree_del didn't call clear function on node's entry.


30 Apr 2004:	ENH:	MemTracker					Status: STABLE

			Now supports an extended version of the MemTData, which is
			capable of handling function names (the one calling the
			mem_tracker_malloc() ).

			Added a new function afc_mem_tracker_dump_stats() to see
			some in-depth statistics for memory allocation.

		ENH:	Base						Status: STABLE

			Added a new flag DEBUG_MEM which can be used to ease memory
			leak tracking.

28 Apr 2004:	ENH:	base.h						Status: STABLE

			Added a new constant AFC_NO_ERR which has the same value of
			AFC_ERR_NO_ERROR.

20 Apr 2004:	ADD:	BTree						Status: BETA

			A new class to handle BTrees.

18 Apr 2004:	FIX:	HashMaster					Status: STABLE

			The sorting routine could lead erroneus results on some situations.

		ENH:	all classes

			Thanks to some preprocessor magic, the afc_(class_name)_set_tags()
			function does not require the AFC_TAG_END tag at the end of the
			list anymore.


15 Apr 2004:	ADD:	FTPClient					Status: ALPHA

			A new class to handle FTP client file transfert.

		ADD:	Circular List					Status: BETA

			A new class that handles circular lists has been added.

		FIX:	string.c					Status: STABLE

			Fixed a bug in afc_string_comp().

			Fixed a bug in afc_string_temp().


28 Feb 2004: 	FIX:	string.c					Status: STABLE

			Fixed a small bug in afc_string_temp() when the function were
			passed a non AFC string as parameter.

23 Feb 2004: -------------------- AFC 2.0 RELEASED -----------------------------------

06 Dec  2003:	FIX:	base.c						Status: STABLE

			Fixed a small bug (introduced in Oct release) in afc_log_fast().

		ENH:	macro for all afc_*_delete() functions

			Now vars are nuked to NULL when afc_*_delete(var) is called.

26 Oct  2003:   ENH:	function: afc_*_before_first()			Status: STABLE

			Added the new afc_*_before_first() method to all classes that
			allow iteration (NodeMaster / ArrayMaster / StringNode /
			Dictionary and HashMaster) so it is now possible to simplify
			while() loops.

		ENH:	Added the new BOOL type for TRUE/FALSE value.
			We still need to review the code, tough.

18 Sep  2003:	ADD:	BinTree						Status: BETA

			Added a new class to handle Binary Trees.

07 Sep  2003:	FIX:	DBI						Status: BETA

			Fixed a memory leak when exiting from the library.

		ENH:	DynamicClass and DynamicClassMaster		Status: Stable

			Some calls now have the right "const char *" prototype when
			needed.

23 Aug  2003:   ENH:	Code clean ups

19 July 2003:	FIX:	StringNode					Status: STABLE

			Fixed a small bug in afc_stringnode_add() function.

17 June 2003:	ADD:	MD5						Status: *BETA*

			Added new MD5 class.

20 May 2003:	ENH:	CGIManager					Status: *UNSTABLE*

			Started the new stuff for WIN32 ISAPI Compatibility.

17 May 2003:	MOD:	string						Status: STABLE

			ADD: new commands afc_string_dirname() and afc_string_basename()
			ENH: optimized afc_string_lower() and afc_string_upper()
			ENH: rewritten (properely) afc_string_temp()

01 May 2003:	FIX:	removed some warnings coming from GCC 3.3

18 Apr 2003:	ADD: 	DateHandler					Status: BETA

			New DateHandler class to handle dates in a breeze.

30 Mar 2003:	FIX:	MemTracker					Status: STABLE

			Now MemTracker works correctly in any kind of situation.

05 Mar 2003:	ADD:	MemTracker					Status: BETA

			Added new class MemTracker that can be plugged inside the
			AFC Base (using afc_track_mallocs() call) to enable memory
			tracking (and automatic free).



12 Feb 2003:	ADD: 	NodeMaster					Status: STABLE
			Added afc_nodemaster_set_clear_func() function.

			Added afc_nodemaster_for_each() function.

		ADD:	HashMaster					Status: STABLE
			Added afc_hash_master_set_clear_func() function.

			Added afc_hash_master_for_each() function.

		ADD:	Dictionary					Status: STABLE
			Added afc_dictionary_set_clear_func() function.

			Added afc_dictionary_for_each() function.


11 Feb 2003:	ADD:	ArrayMaster					Status: STABLE
			Added afc_array_set_clear_func() function. Now ArrayMaster
			is able to delete by itself all items in the list.

			Added afc_array_for_each() function.

04 Jan 2003:	ADD:	DynamicClassMaster				Status: STABLE
			Added the new afc_dynamic_class_master_has_method() function
			to check whether a particular class is already in memory or not.

06 Dec 2002:	ENH: 	DynamicClass					Status: STABLE
			Now DynClass has a new flag inside the structure, add_arg_end.
			It is a boolean value. If you set it to TRUE, the class will add
			an AFC_DYNAMIC_CLASS_ARG_END tag after the last argument parsed in
			the dyn->arg list.
			For backward compatibility, this flag is set to TRUE by default.
			At the moment, there is no way to set it automagically using
			DynamicClassMaster.

18 Sep 2002:	ADD:	InetClient and InetServer classes		Status: ALPHA
			These classes will be the foundation for a set of socket based
			classes.

07 Aug 2002:	ADD:	PyConnector					Status: BETA

28 Jul 2002:	EHN:	DynamicClass - result_type field		Status: STABLE
			Added the result_type in the fields of DC structure, so you can now
			know what kind is the returned ->result.

16 Jul 2002:	MOD:	DynamicClass					Status: STABLE
			- Added the new struct DynamicClassMethodData containing more
			  info about the methods. For example, now the method
			  can tell how many arguments it needs and their types.

			- afc_dynamic_class_find_method() now returns a DynamicClassMethodData

			- afc_dynamic_class_add_method() has a new parameter "params" used to
			  specify the method params types.

18 Jun 2002:	ENH:	ArrayMaster / AFC_ARRAY_SORT_ELEMENT     Status: STABLE
			This is a simple macro to help defining sort elements.

18 Jun 2002:	ADD: 	ReadArgs / afc_readargs_parse_cmd_line()	Status: STABLE
			A new function to parse the command line using ReadArgs has
			been added.

15 Jun 2002:	FIX:	DynamicClassMaster				Status: STABLE
			Removed a memory leak.

14 Jun 2002:	FIX:	CmdParser					Status: STABLE
			Memory leak in CmdParser.

14 Jun 2002:	FIX: 	Dynamic Class					Status: STABLE
			afc_dynamic_class_get_var() now returns NULL when
			the user is requesting a var without having already set
			anything (the dc->vars dictionary is still NULL).

12 Jun 2002:	FIX:	Dictionary					Status: STABLE
			Removed memory leak in afc_dictionary_del()

10 Jun 2002:	ADD:	RegExp / afc_regexp_compute_replace_size()	Status: BETA
			Added a new method to compute the replace string before
			actually performing the replace. This is useful to know
			whether the destination string buffer will be big enough
			or not.

10 Jun 2002:	ENH:	String						Status: STABLE
			Removed a compiler warning.

10 Jun 2002:	FIX:	DynamicClass					Status: STABLE
			Fix memory leak problems when changing values to DynamicClasses.

10 Jun 2002:	FIX:	Threader					Status: STABLE
			Threader.h has all the needed headers now :-)

19 Mar 2002:  	ADD:  	CommandParser     				Status: BETA
      			Added handling of builtin keywords: the first keyword added is the "if" statement.
      			Added handling of functions that return a value (this is different from a "command")

19 Mar 2002:	ENH:	test_area/readargs/test_01.c			Status: STABLE
			Added test case for the "/K" switches.

19 Mar 2002:	FIX:	ReadArgs					Status: STABLE
			Fixed the handling of the /K switch.

11 Mar 2002:	ADD:	Threader 					Status: ALPHA

04 Mar 2002:	FIX:	ReadArgs					Status: STABLE
			Fixed a segfault when using afc_readargs_parse() with wrong values.

02 Mar 2002:	ADD:	base.h/AFC_CLASS_* macros

			Added three new macros.

			- AFC_CLASS_MAGIC(class)	- Returns the MAGIC value of the given class pointer.
			- AFC_CLASS_TYPE(buf,magic)	- Fills the 'buf' string (min 5 chars long) with the
							  "internal" magic string of the magic value

			- AFC_CLASS_NAME(buf,class)	- Fills the 'buf' string (min 5 chars long) with the
							  "internal" magic string of the class. This is mainly
							  a wrapper around AFC_CLASS_MAGIC and AFC_CLASS_TYPE macros.

25 Feb 2002:	ADD:	XMLParser					Status: ALPHA

22 Feb 2002:	ENH: 	CmdParser					Status: STABLE
			Moved internal functions definition into static ones.

19 Feb 2002:	ENH:	DynamicClass					Status: STABLE
			Now DynamicClass allocates some Dictionaries only when needed and
			not at startup.

19 Feb 2002:	ENH:	Dictionary					Status: STABLE
			Better handling of NULL pointers in function calls.

17 Feb 2002:	ADD: 	DynamicClass					Status: STABLE
			Added afc_dynamic_class_execute_vars() method. This method
			allows you to provide a va_list of args for the execute() method.

15 Feb 2002:	ADD:	DynamicClassMaster				Status: STABLE
			- afc_dynamic_class_master_set_tag()
			- afc_dynamic_class_master_set_tags()
			These calls handles DCM tag system.

			DCM now has an "info" field in its structure. This field is
			automatically copied inside the DynamicClass instance once
			it is created.

11 Feb 2002:	ADD:	EasyGUI						Status: ALPHA
			See below.

11 Feb 2002:	ADD:	CmdParser					Status: BETA
			Added a new class: CmdParser. This class implements a Lisp/Scheme like
			syntax to parse commands. The great thing is it do not know any command
			internally, but it is instructed by plugins.
			The first class using it is EasyGUI, still in heavy alpha stage.

10 Feb 2002:	FIX:	ReadArgs					Status: STABLE
			Fixed a small bug in the handling of "tab" chars inside double quoted strings.

10 Feb 2002:	ENH:	ReadArgs					Status: STABLE
			Added the "tab" char to the list of common separators where needed.

10 Feb 2002:	ADD:	test_area/stringnode				Status: STABLE
			Very first test area cases for StringNode.

10 Feb 2002:	ADD:	StringNode					Status: STABLE
			Added support for escape char in the split() method. Now it is possible
			to set (and unset) an escape char to avoid a delimiter char to be treated
			as a delimiter in special cases. By setting the tag AFC_STRINGNODE_TAG_ESCAPE_CHAR
			you can set the escape character to use (NOTE: one single character). To remove
			the escape char, set the tag with a NULL value.

--------------------------------- AFC 0.4.1 -- RELEASED	----------------------------------------------

31 Jan 2002:	ENH:	DynamicClass / DynamicClassMaster / FSTree	Status: STABLE
			Modified class bases.

31 Jan 2002:	ENH:	docs/AFC-Bases					Status: STABLE
			Added the new classes to the docs/AFC-Bases.

31 Jan 2002:	ENH:	afc_start					Status: STABLE
			Added support for new classes, DynamicClass, DynamicClassMaster and FSTree.

25 Jan 2002:	ENH:	DynamicClassMaster				Status: STABLE
			Now DynamicClassMaster can have DynamicClasses specified by functions
			internally defined in the source file and not loaded elsewhere.
			This allow DynamicClassMaster to have "DynamicClasses" defined by the code
			and not loaded by plugins.

25 Jan 2002:	ENH:	EasyGUI library					Status: ALPHA
			Added the "frame" container.

20 Jan 2002:	ADD:	EasyGUI library					Status: ALPHA
			Added a new library to the AFC suite. This library is in a separate
			directory "easygui/" and, when compiled, will generate a stand alone
			library, separated by the standard AFC distribution.
			This is because EasyGUI requires external libs (GTK) while standard
			AFC do not require anything.

			This is a library to create dynamic GUIs without (almost) any knowledge
			of GTK. Even if it is not finished yet, it is already promising. Have
			a look at it.

			Docs for this class are in easygui/docs

			*PLEASE NOTE* This class is in heavy ALPHA stage, many things may change
			and many will. So do not start writing your biggest application around it,
			because you'd have only headaches. But, yes, you can try it :-)

20 Jan 2002:	ENH:	string.c					Status: STABLE
			Changed functions prototype to use the "const char *" in the
			right places.

19 Jan 2002:	ENH:	(all sources)					Status: STABLE
			Standard GPL copyright messages on all sources.

17 Jan 2002:	ENH:	(all classes)					Status: STABLE
			Internal functions defined as static.
			Moved static functions prototypes inside the source code from
			the headers files.

14 Jan 2002:	ENH:	afc_string_temp() in string.c			Status: STABLE
			Slightly modified the afc_string_temp() call. Now it uses the
			mkstemp() call instead of tempnam() for better security and
			to avoid race conditions.

12 Jan 2002:	ADD:	afc_string_temp() in string.c			Status:	STABLE
			This new function is a convenience wrapper around the standard
			stdio call tempnam().

11 Jan 2002:	ADD:	FSTree						Status: Development
			This is a class that handles trees of lists in a way very close
			to the file system paradigm. In fact, you can use methods like
			mkdir() to create "directories" of lists.
			Based on ArrayMaster, it should not be considered stable, even if
			it is already used in a big project.

04 Jan 2002:	ENH:	StringNode					Status: Stable
			A new tag has been added to the StringNode:

				AFC_STRINGNODE_TAG_DISCARD_ZERO_LEN	(TRUE/FALSE)

			This is used by afc_stringnode_split() to know whether it should
			create StringNode items with zero length, or just discard them.
			For example, suppose you are parsing lines like the following:

			line1;data1;pass1;foo1;skip1;
			line2;data2;;foo2;;
			line3;;pass3;;;

			In this case, you'd likely to keep zero len string, so you can
			access the right element by simply call the afc_stringnode_item()
			function.
			But now suppose you are parsing stuff like:

			file_name    123        10/01/1998    /data/disk
			second_file   12        20/12/1999    /data/disk

			This is a "variable spaces" separated list. In this case, you should
			discard zero length string, so you just keep the valuable data in memory.

02 Jan 2002:	ADD:	Dynamic Class Master				Status:	STABLE
			This is a class that handles dynamic class loading (ie. plugins)
			The interface is very open and flexible.
			Status:	STABLE
			This class should be considered stable, since it is already used by
			a very big project with no problems at all.

02 Jan 2002:	ADD:	Dynamic Class					Status:	STABLE
			This is the class that implements the "abstraction layer" for all
			AFC based plugins (dynamic classes).
			This class should be considered stable, since it is already used by
			a very big project with no problems at all.

30 Dec 2001:	ADD:	ChangeLog					Status:	NONE
			From now on, we will store our news and changes to AFC in the Changelog
			file and not the NEWS file anymore.

# vim60: textwidth=130
